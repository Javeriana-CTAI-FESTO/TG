@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "co.edu.javeriana.ctai.tgsecurity.entities.ImageData",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_100278 { 
   	label=edu
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_496592481 { 
   	label=javeriana
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ClienteBuilder1656941467[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ClienteBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   apellido: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   celular: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   correoElectronico: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   identificacion: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nombre: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   orders: List&lt;Order&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rol: Rol [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   usuario: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addOrder(order: Order): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ build(): Cliente</TD></TR>
<TR><TD ALIGN="LEFT" >+ setApellido(apellido: String): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCelular(celular: Long): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCorreoElectronico(correoElectronico: String): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setIdentificacion(identificacion: Long): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setNombre(nombre: String): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setRol(rol: Rol): ClienteBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUsuario(usuario: User): ClienteBuilder</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ImageData1373588664[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ImageData</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   imageData: byte[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sizeMB: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   type: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ImageDataBuilder1656941467[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ImageDataBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   imageData: ImageData [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ build(): ImageData</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

UserBuilder1656941467[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)UserBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   password: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   username: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ build(): User</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPassword(password: String): UserBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUsername(username: String): UserBuilder</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
ImageDataBuilder1656941467 -> ClienteBuilder1656941467[arrowhead=none];
ImageDataBuilder1656941467 -> ImageData1373588664[label="imageData
[0..1]"];
ImageDataBuilder1656941467 -> UserBuilder1656941467[arrowhead=none];
    
}
@enduml